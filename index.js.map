{"mappings":"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","sources":["src/index.ts"],"sourcesContent":["import fs from \"node:fs\";\nimport path from \"node:path\";\nimport { fileURLToPath } from \"node:url\";\nimport prompts from \"prompts\";\nimport { blue, yellow, red, reset } from \"kolorist\";\n\nconst cwd = process.cwd();\n\ntype ColorFunc = (str: string | number) => string;\n\ntype Variant = {\n  name: string;\n  display: string;\n  color: ColorFunc;\n  customCommand?: string;\n};\n\nconst VARIANTS: Variant[] = [\n  {\n    name: \"javascript\",\n    display: \"JavaScript\",\n    color: yellow,\n  },\n  {\n    name: \"typescript\",\n    display: \"TypeScript\",\n    color: blue,\n  },\n];\n\nconst renameFiles: Record<string, string | undefined> = {\n  _gitignore: \".gitignore\",\n};\n\nconst defaultTargetDir = \"promethium-app\";\n\nasync function init() {\n  const argTargetDir = formatTargetDir(process.argv[2]);\n  let targetDir = argTargetDir || defaultTargetDir;\n  const getProjectName = () =>\n    targetDir === \".\" ? path.basename(path.resolve()) : targetDir;\n\n  let result: prompts.Answers<\n    \"projectName\" | \"overwrite\" | \"packageName\" | \"variant\"\n  >;\n\n  try {\n    result = await prompts(\n      [\n        {\n          type: argTargetDir ? null : \"text\",\n          name: \"projectName\",\n          message: reset(\"Project Name:\"),\n          onState: (state) => {\n            targetDir = formatTargetDir(state.value) || defaultTargetDir;\n          },\n        },\n        {\n          type: () =>\n            !fs.existsSync(targetDir) || isEmpty(targetDir) ? null : \"confirm\",\n          name: \"overwrite\",\n          message: () =>\n            (targetDir === \".\"\n              ? \"Current directory\"\n              : `Target directory \"${targetDir}\"`) +\n            ` is not empty. Remove existing files and continue?`,\n        },\n        {\n          type: (_, { overwrite }: { overwrite?: boolean }) => {\n            if (overwrite === false) {\n              throw new Error(red(\"✖\") + \" Operation cancelled\");\n            }\n            return null;\n          },\n          name: \"overwriteChecker\",\n        },\n        {\n          type: () => (isValidPackageName(getProjectName()) ? null : \"text\"),\n          name: \"packageName\",\n          message: reset(\"Package name:\"),\n          initial: () => toValidPackageName(getProjectName()),\n          validate: (dir) =>\n            isValidPackageName(dir) || \"Invalid package.json name\",\n        },\n        {\n          type: \"select\",\n          name: \"variant\",\n          message: reset(\"Select a variant:\"),\n          choices: () =>\n            VARIANTS.map((variant) => {\n              const variantColor = variant.color;\n              return {\n                title: variantColor(variant.display || variant.name),\n                value: variant.name,\n              };\n            }),\n        },\n      ],\n      {\n        onCancel: () => {\n          throw new Error(red(\"✖\") + \" Operation cancelled\");\n        },\n      }\n    );\n  } catch (cancelled: any) {\n    console.log(cancelled.message);\n\n    return;\n  }\n\n  const { projectName, overwrite, packageName, variant } = result;\n\n  const root = path.join(cwd, targetDir);\n\n  if (overwrite) {\n    emptyDir(root);\n  } else if (!fs.existsSync(root)) {\n    fs.mkdirSync(root, { recursive: true });\n  }\n\n  const template: string = variant;\n\n  const pkgInfo = pkgFromUserAgent(process.env.npm_config_user_agent);\n  const pkgManager = pkgInfo ? pkgInfo.name : \"npm\";\n  const isYarn1 = pkgManager === \"yarn\" && pkgInfo?.version.startsWith(\"1.\");\n\n  console.log(`\\nScaffolding project in ${root}...`);\n\n  const templateDir = path.resolve(\n    fileURLToPath(import.meta.url),\n    \"..\",\n    `template-${template}`\n  );\n\n  const write = (file: string, content?: string) => {\n    const targetPath = path.join(root, renameFiles[file] ?? file);\n    if (content) {\n      fs.writeFileSync(targetPath, content);\n    } else {\n      copy(path.join(templateDir, file), targetPath);\n    }\n  };\n\n  const files = fs.readdirSync(templateDir);\n  for (const file of files.filter((f) => f !== \"package.json\")) {\n    write(file);\n  }\n\n  const pkg = JSON.parse(\n    fs.readFileSync(path.join(templateDir, `package.json`), \"utf-8\")\n  );\n\n  pkg.name = packageName || getProjectName();\n\n  write(\"package.json\", JSON.stringify(pkg, null, 2));\n\n  console.log(`\\nDone. Now run:\\n`);\n  if (root !== cwd) {\n    console.log(`  cd ${path.relative(cwd, root)}`);\n  }\n  switch (pkgManager) {\n    case \"yarn\":\n      console.log(\"  yarn\");\n      console.log(\"  yarn dev\");\n      break;\n    default:\n      console.log(`  ${pkgManager} install`);\n      console.log(`  ${pkgManager} run dev`);\n      break;\n  }\n  console.log();\n}\n\nfunction formatTargetDir(targetDir: string | undefined) {\n  return targetDir?.trim().replace(/\\/+$/g, \"\");\n}\n\nfunction isValidPackageName(projectName: string) {\n  return /^(?:@[a-z\\d\\-*~][a-z\\d\\-*._~]*\\/)?[a-z\\d\\-~][a-z\\d\\-._~]*$/.test(\n    projectName\n  );\n}\n\nfunction toValidPackageName(projectName: string) {\n  return projectName\n    .trim()\n    .toLowerCase()\n    .replace(/\\s+/g, \"-\")\n    .replace(/^[._]/, \"\")\n    .replace(/[^a-z\\d\\-~]+/g, \"-\");\n}\n\nfunction isEmpty(path: string) {\n  const files = fs.readdirSync(path);\n  return files.length === 0 || (files.length === 1 && files[0] === \".git\");\n}\n\nfunction emptyDir(dir: string) {\n  if (!fs.existsSync(dir)) {\n    return;\n  }\n  for (const file of fs.readdirSync(dir)) {\n    if (file === \".git\") {\n      continue;\n    }\n    fs.rmSync(path.resolve(dir, file), { recursive: true, force: true });\n  }\n}\n\nfunction pkgFromUserAgent(userAgent: string | undefined) {\n  if (!userAgent) return undefined;\n  const pkgSpec = userAgent.split(\" \")[0];\n  const pkgSpecArr = pkgSpec.split(\"/\");\n  return {\n    name: pkgSpecArr[0],\n    version: pkgSpecArr[1],\n  };\n}\n\nfunction copy(src: string, dest: string) {\n  const stat = fs.statSync(src);\n  if (stat.isDirectory()) {\n    copyDir(src, dest);\n  } else {\n    fs.copyFileSync(src, dest);\n  }\n}\n\nfunction copyDir(srcDir: string, destDir: string) {\n  fs.mkdirSync(destDir, { recursive: true });\n  for (const file of fs.readdirSync(srcDir)) {\n    const srcFile = path.resolve(srcDir, file);\n    const destFile = path.resolve(destDir, file);\n    copy(srcFile, destFile);\n  }\n}\n\ninit().catch((e) => {\n  console.error(e);\n});\n"],"names":[],"version":3,"file":"index.js.map"}